{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPjixoPIY5BwM0wYlfxF1tg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"Hm-mCOCJ_1zd"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UAm8wfgk9Wv7"},"outputs":[],"source":["def descomponer(x):\n","  L = np.tril(x)\n","  U = np.triu(x)\n","  D = np.diag(np.diag(x))\n","  return L,D,U\n","\n","def invertirD(x):\n","  n = len(x)\n","  x = np.diag(x)\n","  res = []\n","  for i in range(n):\n","    res.append(1/x[i])\n","  return np.diag(res)"]},{"cell_type":"code","source":["#Ejercicio 1\n","def Jacobi(A,b,x0,s):\n","  n = len(A)\n","  x = x0\n","  i = 0\n","  aux = descomponer(A)\n","  D = aux[1]\n","  d = invertirD(D)\n","  LU = A - D\n","  Bnorma = np.linalg.norm(b)\n","  for i in range(s+1):\n","    aux = np.dot(-LU,x)\n","    x = np.dot(d,aux) + np.dot(d,b)\n","    xMoño = np.dot(A,x)\n","    error = np.linalg.norm(xMoño-b)/Bnorma\n","    \n","    if (error < 10**-8):\n","        msg = (f'se necesitaron {i + 1} pasos')\n","        return x , i , msg\n","  msg = 'Tope de pasos alcanzada'  \n","  return x, i,msg\n","\n","\n","      "],"metadata":{"id":"CwGsLqjlARbz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Prueba\n","a = np.array([[10,4,5],[2,12,1],[1,5,9]])\n","b = np.array([1,1,1])\n","x0 = np.zeros(3)\n","xLinalg = np.linalg.solve(a,b)\n","xObtenido , i , msg = Jacobi(a,b,x0,5000)\n","\n","flag = np.all(np.isclose(xObtenido , xLinalg))\n","\n","print(f'el vector obtenido fue : \\n' , xObtenido , f'\\n {msg}')\n","\n","print(f'¿El vector obtenido es igual al de linalg?',f'{flag}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3imReVbofg98","executionInfo":{"status":"ok","timestamp":1657562307789,"user_tz":180,"elapsed":18,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"5f27cedc-0ca4-495c-dacd-ae59b73f6496"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["el vector obtenido fue : \n"," [0.03781513 0.07142857 0.06722689] \n"," se necesitaron 28 pasos\n","¿El vector obtenido es igual al de linalg? True\n"]}]},{"cell_type":"code","source":["def testingJacobi(n,matrixSize):\n","  flag = 0\n","  for i in range(n):\n","    #np.random.seed(42)\n","    x0 = np.zeros(matrixSize)\n","    A = np.random.rand(matrixSize,matrixSize)\n","    np.fill_diagonal(A, np.array([4]*matrixSize))\n","    b = np.random.rand(matrixSize)\n","    xObtenido = Jacobi(A,b,x0,5000)[0]\n","    xLinalg = np.linalg.solve(A,b)\n","    if (np.all(np.isclose(xObtenido , xLinalg))):\n","      flag += 1\n","  if flag == n:\n","      return (f'concidieron en {n} las iteraciones con una matriz de {matrixSize}X{matrixSize}')\n","  else: \n","      return(f'lamentablemente solo coincidieron en {flag} iteraciones  con una matriz de {matrixSize}X{matrixSize} en {n} intentos')\n","  \n","\n"],"metadata":{"id":"pDJeQz9VyxRT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","print(testingJacobi(100,3))\n","print('')\n","print(testingJacobi(100,4))\n","print('')\n","print(testingJacobi(100,5))\n","print('')\n","print(testingJacobi(100,6))\n","print('')\n","print(testingJacobi(100,7))\n","print('')\n","print(testingJacobi(100,8))\n","print('')\n","print(testingJacobi(100,9))\n","print('')\n","print(testingJacobi(100,10))\n","print('')\n","\n","\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mFsBMA6tQRAA","executionInfo":{"status":"ok","timestamp":1657562318878,"user_tz":180,"elapsed":11105,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"38a186a1-4bce-46c6-d15e-77dc25bcb23b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["concidieron en 100 las iteraciones con una matriz de 3X3\n","\n","concidieron en 100 las iteraciones con una matriz de 4X4\n","\n","concidieron en 100 las iteraciones con una matriz de 5X5\n","\n","concidieron en 100 las iteraciones con una matriz de 6X6\n","\n","concidieron en 100 las iteraciones con una matriz de 7X7\n","\n","lamentablemente solo coincidieron en 89 iteraciones  con una matriz de 8X8 en 100 intentos\n","\n","lamentablemente solo coincidieron en 56 iteraciones  con una matriz de 9X9 en 100 intentos\n","\n","lamentablemente solo coincidieron en 7 iteraciones  con una matriz de 10X10 en 100 intentos\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"3DfdnZomUa0H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Tr3s0lXSUSqm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Ejercicio 2\n","a  = np.array([[4,2,1],[1,4,1],[2,1,5]])\n","b = np.array([9,5,0])\n","x0 = [1,1,1]\n","Jacobi(a,b,x0,50)[0]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UpNDsfoOwMvt","executionInfo":{"status":"ok","timestamp":1657562318879,"user_tz":180,"elapsed":25,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"2b2e4afa-b0f3-4ac3-8a46-efecd1630686"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 2.00000001,  1.        , -0.99999999])"]},"metadata":{},"execution_count":118}]},{"cell_type":"code","source":["def gauss_seidel(A, b, x0,s,TOL):   \n","    D = np.diag(np.diag(A))\n","    L= np.tril(A, -1)   \n","    U = np.triu(A, +1)\n","    DL_inv = np.linalg.inv(D+L)\n","    B_GS=-DL_inv @U\n","    c_GS = DL_inv @ b\n","    x = x0\n","    for i in range(s):\n","        xant = x\n","        x = B_GS@xant + c_GS \n","    return(x)"],"metadata":{"id":"JUEZm9Ghe57v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Ejercicio 3\n","def sor(A,b,x0,w,s):\n","  x = x0\n","  error = 1\n","  Bnorma = np.linalg.norm(b)\n","  for i in range(s):\n","    xAnt = x\n","    x = (1-w)*xAnt + w*gauss_seidel(A,b,xAnt,1,10**-8)\n","    xMoño = np.dot(A,x)\n","    error = np.linalg.norm(xMoño-b)/Bnorma\n","    \n","    if (error < 10**-8):\n","        msg = (f'se necesitaron {i + 1} pasos')\n","        return x , i, msg\n","  msg = 'Tope de pasos alcanzada' \n","  return x, i,msg\n","\n","   \n","\n","\n","\n","      "],"metadata":{"id":"w9gPZvDvz7nW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from numpy.lib.function_base import meshgrid\n","#Ejercicio 4\n","a  = np.array([[4,2,1],[1,4,1],[2,1,5]])\n","b = np.array([9,5,0])\n","x0 = np.array([1,1,1])\n","\n","# El w es muy alto diverge\n","x1,i,msg = sor(a,b,x0,2.5,50)\n","print('el vector obtenido fue: \\n',x1,f'\\n se necesitaron {i+1} iteraciones , {msg}')\n","\n","x2,i,msg = sor(a,b,x0,1.5,50)\n","print('Caso 2: el vector obtenido fue: \\n' ,x2,'\\n',msg)\n","\n","x3,i,msg = sor(a,b,x0,1,50)\n","print('Caso 3: el vector obtenido fue: \\n' ,x3,'\\n',msg)"],"metadata":{"id":"o3FbuHyd6ItT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657562318881,"user_tz":180,"elapsed":23,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"a65a90d6-76dd-45cf-bd4c-c4132341e32b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["el vector obtenido fue: \n"," [ 2.55010781e+09 -7.61639935e+04  1.66509432e+05] \n"," se necesitaron 50 iteraciones , Tope de pasos alcanzada\n","Caso 2: el vector obtenido fue: \n"," [ 2.00000001  1.         -1.        ] \n"," se necesitaron 28 pasos\n","Caso 3: el vector obtenido fue: \n"," [ 1.99999998  1.         -0.99999999] \n"," se necesitaron 13 pasos\n"]}]},{"cell_type":"code","source":["#Ejercicio 5\n","np.random.seed(42)\n","A = np.random.rand(5,5)\n","np.fill_diagonal(A, np.array([4]*5))\n","b = np.random.rand(5)\n","x0 = np.random.rand(5)\n","x,i,msg = Jacobi(A,b,x0,100)\n","\n","print('el vector obtenido fue: \\n',x,f'\\n{msg}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_cYONCmroSAN","executionInfo":{"status":"ok","timestamp":1657562318881,"user_tz":180,"elapsed":21,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"391ea13a-8cc9-479e-bbac-b7e9ecfe0eb6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["el vector obtenido fue: \n"," [ 0.15530751  0.00426339  0.12146917  0.12711144 -0.03280625] \n","se necesitaron 24 pasos\n"]}]},{"cell_type":"code","source":["w = np.linspace(0,2,1001)\n","res = []\n","for i in range (1001):\n","  res.append(sor(A,b,x0,w[i],100)[1])\n","resProm = np.mean(res)\n"],"metadata":{"id":"XmvIVenTSZ9F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('el promedio de pasos es ',resProm)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XpFJluvRTNkG","executionInfo":{"status":"ok","timestamp":1657562324024,"user_tz":180,"elapsed":21,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"8d28d249-9899-470e-ce79-bfda05703550"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["el promedio de pasos es  45.70629370629371\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(w,res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"XyEb9dS8W9f0","executionInfo":{"status":"ok","timestamp":1657562328855,"user_tz":180,"elapsed":4847,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"5d1d7240-1fa6-4d35-e0b6-fdc3df484ec5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f46244a1dd0>]"]},"metadata":{},"execution_count":125},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# El intervalo de Convergencia con menos de  100 iteraciones es aproximadamente [0.25,1.75]\n","# El minimo se alcanza con w = 1 aproximadamente lo que quiere decir que converge mas rapido"],"metadata":{"id":"5JH2_q1SXLaV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Ejercicio 7\n","def descomponer(x):\n","\n","  L = np.tril(x,-1)\n","  D = np.diag(np.diag(x))\n","  U = np.triu(x,1)\n","\n","  return L,D,U\n","def spectralSor(A,w):\n","  L,D,U = descomponer(A)\n","  inverse = np.linalg.inv(D+w*L)\n","  T = inverse @(-(w*U+(w-1)*D))\n","  eig = np.linalg.eigvals(T)\n","  res = np.abs(eig)\n","  return max(res)\n","\n","\n","\n"],"metadata":{"id":"7ncFfXvJWtXM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def espectralGrande(A):\n","  w = np.linspace(0,2,1001)\n","  res = []\n","  resMalo = []\n","  espectralAux = spectralSor(A,w[0])\n","  for i in range(1001):\n","    espectral = spectralSor(A,w[i])\n","    res.append(espectral)\n","    if espectral < espectralAux:\n","      wmin = w[i]\n","      espectralAux = espectral\n","    if res[i] >= 1:\n","      resMalo.append(w[i])\n","  return res ,resMalo , wmin\n","w = np.linspace(0,2,1001)\n","\n","res, resMalo , wmin = espectralGrande(A)"],"metadata":{"id":"-pWdwe8QVEOk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(w,res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"ee3ZeGBsjNQB","executionInfo":{"status":"ok","timestamp":1657562329789,"user_tz":180,"elapsed":955,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"4861658d-0d1a-4474-9f76-558014032243"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f4624422bd0>]"]},"metadata":{},"execution_count":129},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["for i in range(len(resMalo)):\n","  print(f'Con este valor de W , {resMalo[i]} se obtiene radio espectral mayor que 1')\n"],"metadata":{"id":"XgU9E7v9lCm0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657562329791,"user_tz":180,"elapsed":47,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"f4fcc6bd-80d8-4b46-d008-e0795fbb1e93"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Con este valor de W , 0.0 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.9100000000000001 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.9120000000000001 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.9140000000000001 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.9160000000000001 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.9180000000000001 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.92 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.922 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.924 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.926 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.928 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.93 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.932 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.934 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.936 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.938 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.94 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.942 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.944 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.946 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.948 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.95 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.952 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.954 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.956 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.958 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.96 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.962 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.964 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.966 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.968 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.97 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.972 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.974 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.976 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.978 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.98 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.982 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.984 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.986 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.988 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.99 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.992 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.994 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.996 se obtiene radio espectral mayor que 1\n","Con este valor de W , 1.998 se obtiene radio espectral mayor que 1\n","Con este valor de W , 2.0 se obtiene radio espectral mayor que 1\n"]}]},{"cell_type":"code","source":["print(f'Por otro lado el promedio de Ws \"malos\" es {(np.mean(resMalo))}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rwa6dVUUlt7U","executionInfo":{"status":"ok","timestamp":1657562329793,"user_tz":180,"elapsed":44,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"39def4d9-8e42-4a65-a0e9-69115c008b2e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Por otro lado el promedio de Ws \"malos\" es 1.913404255319149\n"]}]},{"cell_type":"code","source":["print(f'El mejor w es el que minimiza la curva graficada mas arriba dicho valor es {wmin} y obtiene un radio espectral de {min(res)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2MYyhWJRl8yu","executionInfo":{"status":"ok","timestamp":1657562329793,"user_tz":180,"elapsed":37,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"0a6c0d5a-8955-4442-9fad-cdd47648d119"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["El mejor w es el que minimiza la curva graficada mas arriba dicho valor es 0.98 y obtiene un radio espectral de 0.09566288451443515\n"]}]},{"cell_type":"code","source":["#cuantos pasos hace para w = 0.504?\n","print(f'los pasos para el mejor w fueron {sor(A,b,x0,0.98,100)[1] + 1}')\n","print('Concluimos que el W que minimiza la curva de radios espectrales tambien minimiza la cantidad de pasos')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d-C2R4nfrCsP","executionInfo":{"status":"ok","timestamp":1657562329794,"user_tz":180,"elapsed":35,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"dce7ae47-1ae8-4424-a9bf-8bcde72815b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["los pasos para el mejor w fueron 10\n","Concluimos que el W que minimiza la curva de radios espectrales tambien minimiza la cantidad de pasos\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"frG-lGB1rjUd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XMmmLCbytT2n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def matrizSor(A,w):\n","  L,D,U = descomponer(A)\n","  inverse = np.linalg.inv(D+w*L)\n","  T = inverse @(-(w*U+(w-1)*D))\n","  return T\n","def detSor(A):\n","  w = np.linspace(0,2,1001)\n","  resDet = []\n","  for i in range(1001):\n","    determinante = np.linalg.det(matrizSor(A,w[i]))\n","    resDet.append(determinante)\n","  return resDet\n","\n","resDet = detSor(A)\n","w = np.linspace(0,2,1001)\n","\n","def minimoDet(A):\n","  w = np.linspace(0,2,1001)\n","  detMin = np.linalg.det(matrizSor(A,w[0]))\n","  for i in range(1001):\n","    determinante = np.linalg.det(matrizSor(A,w[i]))\n","    if determinante < detMin:\n","      detMin = determinante\n","      wMin = w[i]\n","  return detMin , wMin\n","detMin , wMin = minimoDet(A)\n"],"metadata":{"id":"1AaeYU6StAQU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(w,resDet)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"W-Tw7dXouRK-","executionInfo":{"status":"ok","timestamp":1657562329796,"user_tz":180,"elapsed":31,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"76924a6b-bd90-485f-c5a7-b1abfa0517f2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f46243b2090>]"]},"metadata":{},"execution_count":135},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print('Se observa que para todo W el determinante de la matriz resulta menor a 1 parece ser que no hay una relacion clara/directa entre ambos')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gqg5vgzlueNn","executionInfo":{"status":"ok","timestamp":1657562329796,"user_tz":180,"elapsed":26,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"b391afc6-be1e-49cc-9271-dd7db67502ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Se observa que para todo W el determinante de la matriz resulta menor a 1 parece ser que no hay una relacion clara/directa entre ambos\n"]}]},{"cell_type":"code","source":["print(f'El w que minimiza el determinante es {wMin} y obtiene un valor de {detMin}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EX1NY0XCun6g","executionInfo":{"status":"ok","timestamp":1657562329797,"user_tz":180,"elapsed":22,"user":{"displayName":"Ezequiel Ponce","userId":"04770079672918923797"}},"outputId":"c62f905e-427c-4a9c-ef2c-0624a81a57aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["El w que minimiza el determinante es 2.0 y obtiene un valor de -1.0\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"A5dZI3Y0vuVo"},"execution_count":null,"outputs":[]}]}